{"version":3,"sources":["components/Button/Button.js","components/FileExplorer/FileExplorer.js","components/DisplayRender/DisplayRender.js","components/CodeEditor/CodeEditor.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Button","fileName","clicked","onClick","fileType","className","FileExplorer","editorState","onSelectionChange","DisplayRender","webPage","title","height","width","sandbox","srcDoc","CodeEditor","code","language","onChange","value","onBeforeChange","editor","options","mode","lineNumbers","lint","lineWrapping","theme","Header","App","useState","setWebPage","html","setHtml","css","setCss","js","setJs","setEditorState","useEffect","timeout","setTimeout","clearTimeout","file","key","switchFile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAWeA,EATA,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACzC,OACQ,wBACAD,QAAS,kBAAMA,EAAQC,IACvBC,UAAS,UAAKH,EAAU,sBAAwB,eAFhD,SAGED,KC4BCK,G,MA/BM,SAAC,GAGf,IAFHC,EAEE,EAFFA,YACAC,EACE,EADFA,kBAEA,OACI,sBAAKH,UAAU,eAAf,UACI,8CACA,sBAAKA,UAAU,UAAf,UACI,cAAC,EAAD,CACIH,QAAyB,IAAhBK,EACTN,SAAS,aACTE,QAASK,EACTJ,SAAS,SAEb,cAAC,EAAD,CACIF,QAAyB,IAAhBK,EACTN,SAAS,YACTE,QAASK,EACTJ,SAAS,QAEb,cAAC,EAAD,CACIF,QAAyB,IAAhBK,EACTN,SAAS,WACTE,QAASK,EACTJ,SAAS,eCZdK,G,MAbO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpB,OACI,qBAAKL,UAAU,gBAAf,SACI,wBACAM,MAAM,YACNC,OAAO,OACPC,MAAM,OACNC,QAAQ,gBACRC,OAAQL,Q,6CCyBLM,EA3BI,SAAC,GAID,IAHfL,EAGc,EAHdA,MACAM,EAEc,EAFdA,KACAC,EACc,EADdA,SACAC,EAAc,EAAdA,SAKA,OACI,sBAAKd,UAAU,SAAf,UACI,4BAAIM,IACJ,cAAC,aAAD,CACAS,MAAOH,EACPZ,UAAU,UACVgB,eATiB,SAACC,EAAQJ,EAAUD,GACxCE,EAASF,IASLM,QAAS,CACLC,KAAMN,EACNO,aAAa,EACbC,MAAM,EACNC,cAAc,EACdC,MAAO,kBCnBRC,G,MARA,WACX,OACI,qBAAKxB,UAAU,SAAf,SACI,mDCsEGyB,MArEf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOrB,EAAP,KAAgBsB,EAAhB,KACA,EAAwBD,mBAAS,IAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAsBH,mBAAS,IAA/B,mBAAOI,EAAP,KAAYC,EAAZ,KACA,EAAoBL,mBAAS,IAA7B,mBAAOM,EAAP,KAAWC,EAAX,KACA,EAAsCP,mBAAS,GAA/C,mBAAOxB,EAAP,KAAoBgC,EAApB,KA4CA,OAhBAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBV,EAAW,qCAAD,OAEEC,EAFF,qCAGGE,EAHH,uCAIIE,EAJJ,kCAMT,KACH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAOb,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,cAAC,EAAD,CACEE,YAAaA,EACbC,kBAZgB,SAACoC,GACb,SAATA,GAAiBL,EAAe,GACvB,QAATK,GAAgBL,EAAe,GACtB,OAATK,GAAeL,EAAe,MAzChB,SAACM,GAClB,OAAQA,GACN,KAAK,EACH,OAAQ,cAAC,EAAD,CACElC,MAAM,OACNQ,SAAUe,EACVhB,SAAS,MACTD,KAAMgB,IAElB,KAAK,EACH,OAAQ,cAAC,EAAD,CACEtB,MAAM,MACNQ,SAAUiB,EACVlB,SAAS,MACTD,KAAMkB,IAElB,KAAK,EACH,OAAQ,cAAC,EAAD,CACExB,MAAM,KACNQ,SAAUmB,EACVpB,SAAS,aACTD,KAAMoB,KA+BbS,CAAWvC,MAEd,sBAAKF,UAAU,YAAf,UACE,2CACA,cAAC,EAAD,CAAeK,QAASA,cCzDnBqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d9133ea2.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\nconst Button = ({fileName, clicked, onClick, fileType}) => {\n    return (\n            <button\n            onClick={() => onClick(fileType)}\n            className={`${clicked ? 'file-button clicked' : 'file-button'}`}\n            >{fileName}</button>\n    )\n}\n\nexport default Button\n","import React from 'react'\nimport Button from '../Button/Button'\nimport './FileExplorer.css'\n\nconst FileExplorer = ({\n    editorState,\n    onSelectionChange\n}) => {\n    return (\n        <div className='FileExplorer'>\n            <p>File Explorer</p>\n            <div className='buttons'>\n                <Button \n                    clicked={editorState === 1 ? true : false}\n                    fileName='Index.html'\n                    onClick={onSelectionChange}\n                    fileType='html'\n                />\n                <Button\n                    clicked={editorState === 2 ? true : false} \n                    fileName='Index.css'\n                    onClick={onSelectionChange}\n                    fileType='css'\n                />\n                <Button \n                    clicked={editorState === 3 ? true : false}\n                    fileName='Index.js'\n                    onClick={onSelectionChange}\n                    fileType='js'\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FileExplorer\n","import React from 'react'\nimport './DisplayRender.css'\n\nconst DisplayRender = ({webPage}) => {\n    return (\n        <div className='DisplayRender'>\n            <iframe\n            title='Live View'\n            height=\"100%\"\n            width=\"100%\"\n            sandbox=\"allow-scripts\"\n            srcDoc={webPage}/>\n        </div>\n    )\n}\n\nexport default DisplayRender\n","import React from 'react'\nimport './CodeEditor.css'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport {Controlled as CodeMirror} from 'react-codemirror2'\n\nconst CodeEditor = ({\n    title,\n    code,\n    language,\n    onChange}) => {\n    \n        const handleChange = (editor, language, code) => {\n        onChange(code)\n    }\n    return (\n        <div className='editor'>\n            <p>{title}</p>\n            <CodeMirror\n            value={code}\n            className='wrapper'\n            onBeforeChange={handleChange}\n            options={{\n                mode: language,\n                lineNumbers: true,\n                lint: true,\n                lineWrapping: true,\n                theme: 'material',\n              }}/>\n        </div>\n    )\n}\n\nexport default CodeEditor\n","import React from 'react'\nimport './Header.css'\n\nconst Header = () => {\n    return (\n        <div className='Header'>\n            <h2>Frontend Task</h2>\n        </div>\n    )\n}\n\nexport default Header\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport FileExplorer from './components/FileExplorer/FileExplorer';\nimport DisplayRender from './components/DisplayRender/DisplayRender';\nimport CodeEditor from './components/CodeEditor/CodeEditor';\nimport Header from './components/Header/Header';\n\nfunction App() {\n  const [webPage, setWebPage] = useState('')\n  const [html, setHtml] = useState('')\n  const [css, setCss] = useState('')\n  const [js, setJs] = useState('')\n  const [editorState, setEditorState] = useState(1)\n  const switchFile = (key) => {\n    switch (key) {\n      case 1:\n        return (<CodeEditor\n                  title='HTML'\n                  onChange={setHtml}\n                  language='xml'\n                  code={html}\n                />)\n      case 2:\n        return (<CodeEditor\n                  title='CSS'\n                  onChange={setCss}\n                  language='css'\n                  code={css}\n                />)\n      case 3:\n        return (<CodeEditor\n                  title='JS'\n                  onChange={setJs}\n                  language='javascript'\n                  code={js}\n                />)\n      default:\n        break;\n    }\n  }\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setWebPage(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>`)\n    }, 1000)\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n  const onSelectionChange = (file) => {\n    if(file === 'html') setEditorState(1)\n    if(file === 'css') setEditorState(2)\n    if(file === 'js') setEditorState(3)\n  }\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className='core'>\n        <div className='exp-editor'>\n          <FileExplorer \n            editorState={editorState}\n            onSelectionChange={onSelectionChange}\n          />\n          {switchFile(editorState)}\n        </div>\n        <div className='live-view'>\n          <h2>Live View</h2>\n          <DisplayRender webPage={webPage}/>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}